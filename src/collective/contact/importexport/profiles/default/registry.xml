<?xml version="1.0"?>
<registry xmlns:i18n="http://xml.zope.org/namespaces/i18n"
          i18n:domain="collective.contact.importexport">

  <record interface="collective.contact.importexport.interfaces.IPipelineConfiguration"
          name="collective.contact.importexport.pipeline">
      <field type="plone.registry.field.Text">
          <title i18n:translate="">Pipeline to use to import contacts</title>
          <key_type type="plone.registry.field.Text" />
          <value_type type="plone.registry.field.Text" />
      </field>
<value>[transmogrifier]
pipeline =
    initialization
    csvcontactsource
    common_input_checks
    dependencysorter
#    breakpoint
#    pathinserter
#    directorymanipulator
#    constructor
#    schemaupdater
    logger

# mandatory section !
[config]
# if empty, first found directory is used. Else do not start path with /
directory_path =
organizations_filename = organizations-test.csv
organizations_fieldnames = _id _pid title description organization_type use_parent_address street number additional_address_details zip_code city phone cell_phone fax email website region country _uid
persons_filename = persons-test.csv
persons_fieldnames =
held_positions_filename = heldpositions-test.csv
held_positions_fieldnames =
csv_headers = python:True

[initialization]
blueprint = collective.contact.importexport.init
# basepath is an absolute directory. If empty, buildout dir will be used
basepath =
# if subpath, it will be appended to basepath
subpath = imports

[csvcontactsource]
blueprint = collective.contact.importexport.csvcontactsource
organization_filename = ${config:organizations_filename}
fmtparam-strict = python:True
csv_headers = ${config:csv_headers}

[common_input_checks]
blueprint = collective.contact.importexport.common_input_checks
organization_uniques = _uid
organization_booleans = use_parent_address
person_uniques =
person_booleans =
held_position_uniques =
held_position_booleans =

[dependencysorter]
blueprint = collective.contact.importexport.dependencysorter

[pathinserter]
blueprint = collective.contact.importexport.pathinserter

[directorymanipulator]
blueprint = collective.contact.importexport.directorymanipulator

[constructor]
blueprint = collective.transmogrifier.sections.constructor

[schemaupdater]
blueprint = transmogrify.dexterity.schemaupdater

[logger]
blueprint = collective.transmogrifier.sections.logger
name = logger
level = INFO

[breakpoint]
blueprint = collective.contact.importexport.breakpoint
condition = python:item['_c'] == 1
</value>
  </record>

</registry>
