<?xml version="1.0"?>
<registry xmlns:i18n="http://xml.zope.org/namespaces/i18n"
          i18n:domain="collective.contact.importexport">

  <record interface="collective.contact.importexport.interfaces.IPipelineConfiguration"
          name="collective.contact.importexport.pipeline">
      <field type="plone.registry.field.Text">
          <title i18n:translate="">Pipeline to use to import contacts</title>
          <key_type type="plone.registry.field.Text" />
          <value_type type="plone.registry.field.Text" />
      </field>
<value>[transmogrifier]
pipeline =
    initialization
    csv_disk_source
#    csv_ssh_source
    csv_reader
    common_input_checks
# personal input bp came here
    dependencysorter
    relationsinserter
#    stop
    updatepathinserter
    pathinserter
    constructor
# personal attributes bp came here
    schemaupdater
    reindexobject
#    transitions_inserter
#    workflowupdater
#    breakpoint
    short_log
#    logger
    lastsection

# mandatory section !
[config]
# if empty, first found directory is used. Else relative path in portal
directory_path =
csv_encoding =
organizations_filename = organizations-test.csv
organizations_fieldnames = _id _oid title description organization_type use_parent_address street number additional_address_details zip_code city phone cell_phone fax email website region country _uid
persons_filename = persons-test.csv
persons_fieldnames = _id lastname firstname gender person_title birthday use_parent_address street number additional_address_details zip_code city phone cell_phone fax email website region country _uid
held_positions_filename = heldpositions-test.csv
held_positions_fieldnames = _id _pid _oid _fid label start_date end_date use_parent_address street number additional_address_details zip_code city phone cell_phone fax email website region country _uid

[initialization]
blueprint = collective.contact.importexport.init
# basepath is an absolute directory. If empty, buildout dir will be used
basepath =
# if subpath, it will be appended to basepath
subpath = imports

[csv_ssh_source]
blueprint = collective.contact.importexport.csv_ssh_source
servername = sftp-client.imio.be
username = zope
server_path = /srv/sftp/inbw/upload_success
registry_filename = 0_registry.dump
transfer_path =

[csv_disk_source]
blueprint = collective.contact.importexport.csv_disk_source
organizations_filename = ${config:organizations_filename}
persons_filename = ${config:persons_filename}
held_positions_filename = ${config:held_positions_filename}

[csv_reader]
blueprint = collective.contact.importexport.csv_reader
fmtparam-strict = python:True
csv_headers = python:True

[common_input_checks]
blueprint = collective.contact.importexport.common_input_checks
phone_country = BE
language = fr
organization_uniques = _uid
organization_booleans = use_parent_address
person_uniques = _uid
person_booleans = use_parent_address
held_position_uniques = _uid
held_position_booleans = use_parent_address

[dependencysorter]
blueprint = collective.contact.importexport.dependencysorter

[relationsinserter]
blueprint = collective.contact.importexport.relationsinserter

[updatepathinserter]
blueprint = collective.contact.importexport.updatepathinserter
# list of 'column' 'index name' 'item condition' 'must-exist' quartets used to search in catalog for an existing object
organization_uniques = _uid UID python:True python:True
person_uniques = _uid UID python:True python:True
held_position_uniques = _uid UID python:True python:True

[pathinserter]
blueprint = collective.contact.importexport.pathinserter
organization_id_keys = title
person_id_keys = firstname lastname
held_position_id_keys = label

[constructor]
blueprint = collective.transmogrifier.sections.constructor

[schemaupdater]
blueprint = transmogrify.dexterity.schemaupdater

[reindexobject]
blueprint = plone.app.transmogrifier.reindexobject

[transitions_inserter]
blueprint = collective.contact.importexport.transitions_inserter

[workflowupdater]
blueprint = plone.app.transmogrifier.workflowupdater

[short_log]
blueprint = collective.contact.importexport.short_log

[logger]
blueprint = collective.transmogrifier.sections.logger
name = logger
level = INFO

[lastsection]
blueprint = collective.contact.importexport.lastsection

[stop]
blueprint = collective.contact.importexport.stop
condition = python:True

[breakpoint]
blueprint = collective.contact.importexport.breakpoint
condition = python:item.get('_id', u'') == u'0'
</value>
  </record>

</registry>
